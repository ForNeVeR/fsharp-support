plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.1.51'
    id "org.jetbrains.intellij" version "0.2.17"
}

group 'com.jetbrains'

sourceCompatibility = 1.8
targetCompatibility = 1.8

intellij {
    type 'RD'

    // Download a version of Rider to compile and run with. Either set `version` to
    // 'LATEST-TRUNK-SNAPSHOT' or 'LATEST-EAP-SNAPSHOT' or a known version.
    // This will download from www.jetbrains.com/intellij-repository/snapshots or
    // www.jetbrains.com/intellij-repository/releases, respectively.
    // Note that there's no guarantee that these are kept up to date
    // version = 'LATEST-TRUNK-SNAPSHOT'
    // If the build isn't available in intellij-repository, use an installed version via `localPath`
    // localPath = '/Users/matt/Library/Application Support/JetBrains/Toolbox/apps/Rider/ch-1/171.4089.265/Rider EAP.app/Contents'
    // localPath = "C:\\Users\\Ivan.Shakhov\\AppData\\Local\\JetBrains\\Toolbox\\apps\\Rider\\ch-0\\171.4456.459"
    // localPath = "C:\\Users\\ivan.pashchenko\\AppData\\Local\\JetBrains\\Toolbox\\apps\\Rider\\ch-0\\dev"
//    localPath 'build/riderRD-173-SNAPSHOT'

    version '173-SNAPSHOT'
    downloadSources false
    updateSinceUntilBuild false
}

sourceSets {
    'rider-fsharp' {
        java.srcDirs 'src'
    }
    test {
        java.srcDir 'testSrc'
        resources.srcDir 'testData'
    }
}

def src = '../ReSharper.FSharp/src'
def dllFiles = [
        'FSharp.Common/bin/Debug/net451/FSharp.Core.dll',
        'FSharp.Common/bin/Debug/net451/FSharp.Compiler.Service.dll',
        'FSharp.Common/bin/Debug/net451/FSharp.Compiler.Service.MSBuild.v12.dll',
        'FSharp.Psi.Features/bin/Debug/net451/FantomasLib.dll',

        'FSharp.ProjectModelBase/bin/Debug/net451/JetBrains.ReSharper.Plugins.FSharp.ProjectModelBase.dll',
        'FSharp.Common/bin/Debug/net451/JetBrains.ReSharper.Plugins.FSharp.Common.dll',
        'FSharp.Psi/bin/Debug/net451/JetBrains.ReSharper.Plugins.FSharp.Psi.dll',
        'FSharp.Psi.Features/bin/Debug/net451/JetBrains.ReSharper.Plugins.FSharp.Psi.Features.dll',

        'Daemon.FSharp/bin/Debug/net451/JetBrains.ReSharper.Plugins.FSharp.Daemon.Cs.dll',
        'Services.FSharp/bin/Debug/net451/JetBrains.ReSharper.Plugins.FSharp.Services.Cs.dll'
]

def pdbFiles = [
        'FSharp.Common/bin/Debug/net451/FSharp.Compiler.Service.pdb',

        'FSharp.ProjectModelBase/bin/Debug/net451/JetBrains.ReSharper.Plugins.FSharp.ProjectModelBase.pdb',
        'FSharp.Common/bin/Debug/net451/JetBrains.ReSharper.Plugins.FSharp.Common.pdb',
        'FSharp.Psi/bin/Debug/net451/JetBrains.ReSharper.Plugins.FSharp.Psi.pdb',
        'FSharp.Psi.Features/bin/Debug/net451/JetBrains.ReSharper.Plugins.FSharp.Psi.Features.pdb',

        'Daemon.FSharp/bin/Debug/net451/JetBrains.ReSharper.Plugins.FSharp.Daemon.Cs.pdb',
        'Services.FSharp/bin/Debug/net451/JetBrains.ReSharper.Plugins.FSharp.Services.Cs.pdb'
]

def debug = false
def files = debug ? dllFiles + pdbFiles : dllFiles

prepareSandbox {
    files.forEach({ f ->
        def file = file("$src/$f")
        if (!file.exists()) throw new RuntimeException("File $file does not exist")

        logger.warn("prepareSandbox: " +
                file.toString() + " -> " +
                "$destinationDir/$intellij.pluginName/dotnet")
        from(file, { into "$intellij.pluginName/dotnet" })
    })
    into("$intellij.pluginName/projectTemplates") {
        from 'projectTemplates'
    }
}

prepareTestingSandbox {
    files.forEach({ f ->
        def file = file("$src/$f")
        if (!file.exists()) throw new RuntimeException("File $file does not exist")

        logger.warn("prepareTestingSandbox: " +
                file.toString() + " -> " +
                "$destinationDir/$intellij.pluginName/dotnet")
        from(file, { into "$intellij.pluginName/dotnet" })
    })
    into("$intellij.pluginName/projectTemplates") {
        from 'projectTemplates'
    }
}

wrapper {
    gradleVersion '4.2'
}

repositories {
    mavenCentral()
}

test {
    useTestNG() {}
    testLogging {
        showStandardStreams = true
        exceptionFormat "full"
    }
}
